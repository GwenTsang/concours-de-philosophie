{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Ce JupyterNotebook prend en input chaque PDF dans le dossier \"/content/PDF\", il crée un dossier du nom de ce PDF (accessible directement depuis \"/content\") et il décompose l'intégralité des pages du PDF dans ce dossier au format **PNG**, avec des images numérotées dans l'ordre. En préservant le plus possible la fidélité au PDF original et la résolution (dpi = 300)."
      ],
      "metadata": {
        "id": "Cd46n0wouUCp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hu2XXePl95Nj",
        "outputId": "ef32e4e2-e2f0-463c-edaf-843c16206451"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import shutil\n",
        "import os\n",
        "\n",
        "src = '/content/drive/MyDrive/Scans des copies de concours/temp'\n",
        "dst = '/content/folder'\n",
        "\n",
        "if os.path.exists(dst):\n",
        "    shutil.rmtree(dst)\n",
        "\n",
        "shutil.copytree(src, dst)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "-H_IWiOI-FWw",
        "outputId": "caa513af-a49d-4e9e-daac-0fe7ba98c65c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'/content/folder'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pymupdf -q"
      ],
      "metadata": {
        "id": "VanLJBE1tJap"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VwLBDkw5tBzG",
        "outputId": "61782218-5567-4a10-8823-1afa87f5b571"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Starting PDF to image conversion...\n",
            "Input PDF folder: /content/drive/MyDrive/Scans des copies de concours/PDF\n",
            "Output base directory: /content/because\n",
            "Image DPI: 300\n",
            "------------------------------\n",
            "Found 4 PDF file(s) to process.\n",
            "\n",
            "Processing: Les maîtres de vérité (CAPES 2022 - note : 11).pdf\n",
            "  Created output folder: /content/because/Les maîtres de vérité (CAPES 2022 - note : 11)\n",
            "  PDF has 12 page(s). Converting...\n",
            "  Successfully converted all pages for Les maîtres de vérité (CAPES 2022 - note : 11).pdf.\n",
            "\n",
            "Processing: La paix est-elle le plus grand des biens (CAPES 2020 - note : 15).pdf\n",
            "  Created output folder: /content/because/La paix est-elle le plus grand des biens (CAPES 2020 - note : 15)\n",
            "  PDF has 16 page(s). Converting...\n",
            "  Successfully converted all pages for La paix est-elle le plus grand des biens (CAPES 2020 - note : 15).pdf.\n",
            "\n",
            "Processing: La paix est-elle le plus grand des biens ? (CAPES 2020 - note : 14,5).pdf\n",
            "  Created output folder: /content/because/La paix est-elle le plus grand des biens ? (CAPES 2020 - note : 14,5)\n",
            "  PDF has 8 page(s). Converting...\n",
            "  Successfully converted all pages for La paix est-elle le plus grand des biens ? (CAPES 2020 - note : 14,5).pdf.\n",
            "\n",
            "Processing: Les maitres de vérité (CAPES 2022 - note : 11).pdf\n",
            "  Created output folder: /content/because/Les maitres de vérité (CAPES 2022 - note : 11)\n",
            "  PDF has 16 page(s). Converting...\n",
            "  Successfully converted all pages for Les maitres de vérité (CAPES 2022 - note : 11).pdf.\n",
            "\n",
            "------------------------------\n",
            "Processing complete.\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import fitz  # PyMuPDF\n",
        "import shutil # For removing existing folders if needed (optional)\n",
        "\n",
        "def pdf_to_images(pdf_folder_path, output_base_path, dpi=300):\n",
        "    \"\"\"\n",
        "    Converts each PDF in a folder to a sequence of images, stored in\n",
        "    a dedicated folder named after the PDF.\n",
        "\n",
        "    Args:\n",
        "        pdf_folder_path (str): Path to the folder containing input PDFs.\n",
        "        output_base_path (str): Path to the directory where output folders\n",
        "                                 (named after PDFs) will be created.\n",
        "        dpi (int): Dots Per Inch resolution for the output images.\n",
        "                   Higher DPI means better quality and larger file size.\n",
        "                   300 is good for print quality.\n",
        "    \"\"\"\n",
        "    print(f\"Starting PDF to image conversion...\")\n",
        "    print(f\"Input PDF folder: {pdf_folder_path}\")\n",
        "    print(f\"Output base directory: {output_base_path}\")\n",
        "    print(f\"Image DPI: {dpi}\")\n",
        "    print(\"-\" * 30)\n",
        "\n",
        "    # Ensure the input PDF folder exists\n",
        "    if not os.path.isdir(pdf_folder_path):\n",
        "        print(f\"Error: Input folder '{pdf_folder_path}' not found.\")\n",
        "        return\n",
        "\n",
        "    # Ensure the output base directory exists\n",
        "    os.makedirs(output_base_path, exist_ok=True)\n",
        "\n",
        "    # List all files in the PDF folder\n",
        "    try:\n",
        "        pdf_files = [f for f in os.listdir(pdf_folder_path)\n",
        "                     if os.path.isfile(os.path.join(pdf_folder_path, f)) and f.lower().endswith(\".pdf\")]\n",
        "    except OSError as e:\n",
        "        print(f\"Error accessing PDF folder: {e}\")\n",
        "        return\n",
        "\n",
        "    if not pdf_files:\n",
        "        print(\"No PDF files found in the input folder.\")\n",
        "        return\n",
        "\n",
        "    print(f\"Found {len(pdf_files)} PDF file(s) to process.\")\n",
        "\n",
        "    # Process each PDF file\n",
        "    for pdf_filename in pdf_files:\n",
        "        pdf_full_path = os.path.join(pdf_folder_path, pdf_filename)\n",
        "        pdf_name_without_ext = os.path.splitext(pdf_filename)[0]\n",
        "\n",
        "        # Create the output folder path for this PDF\n",
        "        output_folder_path = os.path.join(output_base_path, pdf_name_without_ext)\n",
        "\n",
        "        print(f\"\\nProcessing: {pdf_filename}\")\n",
        "\n",
        "        # --- Optional: Uncomment to remove existing output folder ---\n",
        "        # if os.path.exists(output_folder_path):\n",
        "        #     print(f\"  Output folder '{output_folder_path}' already exists. Removing it.\")\n",
        "        #     try:\n",
        "        #         shutil.rmtree(output_folder_path)\n",
        "        #     except OSError as e:\n",
        "        #         print(f\"  Error removing existing folder: {e}. Skipping this PDF.\")\n",
        "        #         continue\n",
        "        # -----------------------------------------------------------\n",
        "\n",
        "        # Create the output folder (if it doesn't exist)\n",
        "        try:\n",
        "            os.makedirs(output_folder_path, exist_ok=True)\n",
        "            print(f\"  Created output folder: {output_folder_path}\")\n",
        "        except OSError as e:\n",
        "            print(f\"  Error creating output folder: {e}. Skipping this PDF.\")\n",
        "            continue\n",
        "\n",
        "        # Open the PDF\n",
        "        doc = None # Initialize doc to None\n",
        "        try:\n",
        "            doc = fitz.open(pdf_full_path)\n",
        "            num_pages = len(doc)\n",
        "            print(f\"  PDF has {num_pages} page(s). Converting...\")\n",
        "\n",
        "            # Determine padding needed for page numbers (e.g., page_001, page_010)\n",
        "            page_num_padding = len(str(num_pages))\n",
        "\n",
        "            # Calculate the zoom factor based on desired DPI\n",
        "            # Standard PDF units are points (72 points per inch)\n",
        "            zoom_factor = dpi / 72.0\n",
        "            matrix = fitz.Matrix(zoom_factor, zoom_factor)\n",
        "\n",
        "            # Convert each page to an image\n",
        "            for page_index in range(num_pages):\n",
        "                page_num = page_index + 1  # User-friendly page number (starts from 1)\n",
        "                page = doc.load_page(page_index) # Load the page\n",
        "\n",
        "                # Render page to an image pixmap using the matrix for high DPI\n",
        "                # alpha=False makes the background white if there's no content,\n",
        "                # change to True if you need to preserve transparency (for PNG).\n",
        "                pix = page.get_pixmap(matrix=matrix, alpha=False)\n",
        "\n",
        "                # Define output image filename\n",
        "                image_filename = f\"page_{page_num:0{page_num_padding}d}.png\" # Using PNG format\n",
        "                image_output_path = os.path.join(output_folder_path, image_filename)\n",
        "\n",
        "                # Save the image\n",
        "                pix.save(image_output_path)\n",
        "                # print(f\"    Saved: {image_output_path}\") # Uncomment for verbose output per page\n",
        "\n",
        "            print(f\"  Successfully converted all pages for {pdf_filename}.\")\n",
        "\n",
        "        except fitz.fitz.FileNotFoundError:\n",
        "             print(f\"  Error: PDF file not found at '{pdf_full_path}'. Might be a path issue.\")\n",
        "        except Exception as e:\n",
        "            print(f\"  An error occurred while processing {pdf_filename}: {e}\")\n",
        "        finally:\n",
        "            # Ensure the document is closed even if an error occurs\n",
        "            if doc:\n",
        "                doc.close()\n",
        "                # print(f\"  Closed PDF: {pdf_filename}\")\n",
        "\n",
        "    print(\"\\n\" + \"-\" * 30)\n",
        "    print(\"Processing complete.\")\n",
        "\n",
        "# --- Configuration ---\n",
        "pdf_input_directory = \"/content/drive/MyDrive/Scans des copies de concours/PDF\"\n",
        "output_base_directory = \"/content/because\"\n",
        "image_resolution_dpi = 300  # Adjust DPI as needed (e.g., 150 for screen, 300+ for print)\n",
        "\n",
        "# --- Run the conversion ---\n",
        "# Before running, make sure the /content/PDF folder exists and contains your PDFs.\n",
        "# You might need to upload PDFs or mount Google Drive.\n",
        "# Example: Create the PDF folder if it doesn't exist (useful for testing)\n",
        "if not os.path.exists(pdf_input_directory):\n",
        "   os.makedirs(pdf_input_directory)\n",
        "   print(f\"Created placeholder input directory: {pdf_input_directory}\")\n",
        "   print(\"Please upload your PDF files into this folder.\")\n",
        "\n",
        "pdf_to_images(pdf_input_directory, output_base_directory, image_resolution_dpi)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Le code python suivant est utile pour choisir le modèle de référence. En effet, il faut que la copie choisie comme référence ait au moins autant de page que celles pour lesquelles elle sert de référence"
      ],
      "metadata": {
        "id": "bthJAyDSV6cL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#@title Quelle copie a le plus de page (quel dossier contient le plus d'élément)\n",
        "\n",
        "import os\n",
        "\n",
        "root_dir = \"/content/drive/MyDrive/Copies d'agrégation PNG ready-OCR\"\n",
        "\n",
        "if not os.path.isdir(root_dir):\n",
        "    print(f\"Directory {root_dir} does not exist.\")\n",
        "    exit()\n",
        "\n",
        "folder_counts = {}\n",
        "\n",
        "for subfolder in os.listdir(root_dir):\n",
        "    subfolder_path = os.path.join(root_dir, subfolder)\n",
        "\n",
        "    if os.path.isdir(subfolder_path):\n",
        "        png_count = 0\n",
        "        for file in os.listdir(subfolder_path):\n",
        "            if file.lower().endswith('.png'):\n",
        "                png_count += 1\n",
        "        folder_counts[subfolder] = png_count\n",
        "\n",
        "if not folder_counts:\n",
        "    print(\"No subfolders found.\")\n",
        "else:\n",
        "    # Sort folders by PNG count (descending order)\n",
        "    sorted_folders = sorted(folder_counts.items(), key=lambda x: x[1], reverse=True)\n",
        "\n",
        "    print(\"Top 10 subfolders by PNG count:\")\n",
        "    for rank, (folder, count) in enumerate(sorted_folders[:10], 1):\n",
        "        print(f\"{rank}. {folder}: {count} PNG files\")\n",
        "    print(f\"Subfolder '{max_subfolder}' has the most PNG files: {max_count}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mh-XgbroDmW4",
        "outputId": "850ab55c-ab7d-47d0-fa9c-6e4311c0e7d2",
        "cellView": "form"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 10 subfolders by PNG count:\n",
            "1. Est-ce une chance de naître humain ? (AGREG interne 2023 - note : 18,5): 22 PNG files\n",
            "2. Peut-on vivre en paix avec son inconscient ? (AGREG interne 2021 - note : 14): 21 PNG files\n",
            "3. Le bonheur est-il affaire de hasard ou de nécessité ? (AGREG interne 2022 - note : 8): 20 PNG files\n",
            "4. Le vrai et le réel (AGREG - note : 15): 19 PNG files\n",
            "5. Le bonheur est-il affaire de hasard ou de nécessité ? (AGREG interne 2022 - note : 16): 19 PNG files\n",
            "6. Qu’apprenons-nous de nos affects ? (AGREG ext. 2020 - note : 15): 18 PNG files\n",
            "7. Peut-on vivre en paix avec son inconscient ? (AGREG interne 2021 -note : 14): 17 PNG files\n",
            "8. L'usage des Principes (AGREG externe 2022 - note : 11): 16 PNG files\n",
            "9. Peut on vivre en paix avec son inconscient ? (AGREG interne 2021 - note : 17) (1): 16 PNG files\n",
            "10. Peut-on vivre en paix avec son inconscient ? (AGREG interne 2021 -note : 12): 16 PNG files\n",
            "Subfolder 'Est-ce une chance de naître humain ? (AGREG interne 2023 - note : 18,5)' has the most PNG files: 22\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "\n",
        "# Define paths\n",
        "model_dir = \"/content/model\"\n",
        "to_crop_dir = \"/content/to_crop\"\n",
        "\n",
        "def process_images(model_path, to_crop_path, output_path):\n",
        "    # Load both images\n",
        "    model_img = cv2.imread(model_path)\n",
        "    to_crop_img = cv2.imread(to_crop_path)\n",
        "\n",
        "    if model_img is None or to_crop_img is None:\n",
        "        print(f\"Could not read images for {os.path.basename(model_path)}\")\n",
        "        return\n",
        "\n",
        "    # Get dimensions\n",
        "    model_height = model_img.shape[0]\n",
        "    original_height = to_crop_img.shape[0]\n",
        "\n",
        "    # Calculate header height\n",
        "    header_height = original_height - model_height\n",
        "\n",
        "    if header_height <= 0:\n",
        "        print(f\"Invalid header height for {os.path.basename(model_path)}\")\n",
        "        return\n",
        "\n",
        "    # Perform cropping\n",
        "    cropped_img = to_crop_img[header_height:, :, :]\n",
        "\n",
        "    # Overwrite original image\n",
        "    cv2.imwrite(output_path, cropped_img)\n",
        "\n",
        "def main():\n",
        "    # Get all template pages\n",
        "    model_pages = {os.path.splitext(f)[0]: f\n",
        "                   for f in os.listdir(model_dir)\n",
        "                   if f.lower().endswith('.png')}\n",
        "\n",
        "    # Process each subdirectory in to_crop\n",
        "    for subdir in os.listdir(to_crop_dir):\n",
        "        current_dir = os.path.join(to_crop_dir, subdir)\n",
        "\n",
        "        if not os.path.isdir(current_dir):\n",
        "            continue\n",
        "\n",
        "        # Process each image in subdirectory\n",
        "        for img_file in os.listdir(current_dir):\n",
        "            if not img_file.lower().endswith('.png'):\n",
        "                continue\n",
        "\n",
        "            # Get page identifier\n",
        "            page_base = os.path.splitext(img_file)[0]\n",
        "\n",
        "            # Find matching template\n",
        "            if page_base not in model_pages:\n",
        "                continue\n",
        "\n",
        "            model_path = os.path.join(model_dir, model_pages[page_base])\n",
        "            input_path = os.path.join(current_dir, img_file)\n",
        "\n",
        "            process_images(model_path, input_path, input_path)  # Overwrite original\n",
        "\n",
        "        print(f\"Processed {subdir}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n",
        "    print(\"Cropping completed! Original images have been overwritten.\")"
      ],
      "metadata": {
        "id": "r6DcNfWgEn9B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f6820a1a-d1c5-4f0e-d581-bf2e1f47b62e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_12.png\n",
            "Processed Les maîtres de vérité (CAPES 2022 - note : 11)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_15.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_12.png\n",
            "Processed La paix est-elle le plus grand des biens (CAPES 2020 - note : 15)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_15.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_16.png\n",
            "Invalid header height for page_12.png\n",
            "Processed Qu'est-ce qui est sensible ? (AGREG interne 2024 - note : 15).pdf\n",
            "Processed La paix est-elle le plus grand des biens ? (CAPES 2020 - note : 14,5)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Processed Le commerce des corps (AGREG 2023 - note : 15)\n",
            "Processed L'égalité (AGREG 2023 - note : 12)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_15.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_16.png\n",
            "Invalid header height for page_12.png\n",
            "Processed L'égalité (AGREG externe 2023 - note : 15)\n",
            "Processed Dire, est-ce autre chose que vouloir dire ? (CAPES 2021 - note : 12)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_22.png\n",
            "Invalid header height for page_15.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_19.png\n",
            "Invalid header height for page_24.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_21.png\n",
            "Invalid header height for page_23.png\n",
            "Invalid header height for page_16.png\n",
            "Invalid header height for page_12.png\n",
            "Invalid header height for page_20.png\n",
            "Processed Qu'est-ce qui est sensible ? (AGREG interne 2024 - note : 11).pdf\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_12.png\n",
            "Processed Limagination nous instruit-elle (AGREG ext. 2024 - note : 10)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_12.png\n",
            "Processed Qu'est-ce qui est sensible ? (AGREG interne 2024 - note : 7)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_22.png\n",
            "Invalid header height for page_15.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_19.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_21.png\n",
            "Invalid header height for page_16.png\n",
            "Invalid header height for page_12.png\n",
            "Invalid header height for page_20.png\n",
            "Processed Qu'est-ce qui est sensible ? (AGREG interne 2024 - note : 14)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_15.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_16.png\n",
            "Invalid header height for page_12.png\n",
            "Processed « Être soi-même » cela a t-il un sens ? (CAPES 2023 - note : 14,5)\n",
            "Invalid header height for page_03.png\n",
            "Invalid header height for page_15.png\n",
            "Invalid header height for page_04.png\n",
            "Invalid header height for page_11.png\n",
            "Invalid header height for page_08.png\n",
            "Invalid header height for page_07.png\n",
            "Invalid header height for page_16.png\n",
            "Invalid header height for page_12.png\n",
            "Processed Les maitres de vérité (CAPES 2022 - note : 11)\n",
            "Cropping completed! Original images have been overwritten.\n"
          ]
        }
      ]
    }
  ]
}
